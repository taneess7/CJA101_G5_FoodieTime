package com.foodietime.act.model;


import java.text.Normalizer;
import java.util.List;
import java.util.Optional;
import java.util.function.BiFunction;


import com.foodietime.product.model.ProductVO;


public enum ActCategoryEnum {
	

    // È°ûÂûã 1: ÂïÜÂìÅÈ°ûÂà•ÊàñÂêçÁ®±Á¨¶ÂêàÔºåList.ofË§áÊï∏ÈÅ∏È†ÖÔºåÈÅøÂÖçÁÑ°Ê≥ïËß£ÊûêÊ¥ªÂãï
    NEW_PRODUCT(List.of("Êñ∞ÂìÅ‰∏äÂ∏Ç", "ËçâËéìÂÑ™ÊÉ†"), (prod, act) ->
        prod.getProdName().contains("ËçâËéì")
            ? (int)(prod.getProdPrice() * act.getActDiscValue())
            : prod.getProdPrice()
    ),

    ITALIAN_FEST(List.of("Áæ©ÂºèÁæéÈ£üÁØÄ"), (prod, act) ->
    (prod.getProductCategory().getProdCate().contains("Áæ©Âºè")||prod.getProdName().contains("Áæ©Â§ßÂà©È∫µ"))
            ? (int)(prod.getProdPrice() * act.getActDiscValue())
            : prod.getProdPrice()
    ),

    BBQ_DAY(List.of("ÁáíÁÉ§Êó•"), (prod, act) ->
    (prod.getProductCategory().getProdCate().contains("Á¥†")||prod.getProdName().contains("ÁÉ§"))
            ? (int)(prod.getProdPrice() * act.getActDiscValue())
            : prod.getProdPrice()
    ),

    HOT_POT(List.of("ÁÅ´ÈçãÂ≠£", "ÁÅ´ÈçãÂ•óÈ§ê"), (prod, act) ->
    (Optional.ofNullable(prod.getProductCategory().getProdCate()).orElse("").contains("ÁÅ´Èçã") ||
     Optional.ofNullable(prod.getProdName()).orElse("").contains("Èçã"))
    ? (int)(prod.getProdPrice() * act.getActDiscValue())
    : prod.getProdPrice()
    ),
    
    VEG_PROD(List.of("Á¥†È£üÊé®Âª£"), (prod, act) -> 
        (prod.getProductCategory().getProdCate().contains("Á¥†")||prod.getProdName().contains("Á¥†"))
        ? (int)(prod.getProdPrice() * act.getActDiscValue())
        : prod.getProdPrice()
    ),
    
    FASTFOOD(List.of("ÈÄüÈ£üÂÑ™ÊÉ†"), (prod, act) -> 
    (prod.getProductCategory().getProdCate().contains("ÁæéÂºè")||prod.getProdName().contains("ÁÇ∏"))
    ? (int)(prod.getProdPrice() * act.getActDiscValue())
    : prod.getProdPrice()
    ),

 // È°ûÂûã 2: Â∫óÂÆ∂ÂàÜÈ°ûÁ¨¶Âêà
    DRINK_DAY(List.of("ÂÑ™ÊÉ†Ê¥ªÂãï"), (prod, act) -> {
    	String catName = prod.getProductCategory().getProdCate(); // ÊîπÁÇ∫ÂïÜÂìÅÂàÜÈ°ûÂêçÁ®±
    	    int price = prod.getProdPrice();
    	    double value = act.getActDiscValue();   // ÊäòÊâ£ÂÄº
    	    Byte type = act.getActDiscount();    // ÊäòÊâ£È°ûÂûãÔºö1 = Ê∏õÂÉπ„ÄÅ0 = ÁôæÂàÜÊØî

    	    int finalPrice;

    	    if (type != null && type == 1) {
    	        // Ê∏õÂÉπÔºàÂ¶ÇÊäò 5 ÂÖÉÔºâ
    	        finalPrice = price - (int) value;
    	    } else {
    	        // ÁôæÂàÜÊØîÔºàÂ¶Ç 0.85 Ë°®Á§∫ 85 ÊäòÔºâ
    	        finalPrice = (int)(price * value);
    	    }

    	    // ÊúÄ‰ΩéÂÉπÊ†º‰∏çËÉΩÂ∞èÊñº 0
    	    finalPrice = Math.max(finalPrice, 0);

//    	    System.out.println("üßæ ÂïÜÂìÅÂêçÁ®±: " + prod.getProdName());
//    	    System.out.println("üßæ Â∫óÂÆ∂ÂàÜÈ°û: " + catName);
//    	    System.out.println("üßæ ÊäòÊâ£ÊñπÂºè: " + (type != null && type == 1 ? "Ê∏õÂÉπ" : "ÁôæÂàÜÊØî"));
//    	    System.out.println("üßæ ÂéüÂÉπ = " + price + "ÔºåÊäòÊâ£ÂÉπ = " + finalPrice);

    	    return catName != null && (catName.contains("Áîú") || catName.contains("È£≤")) 
    	        ? finalPrice 
    	        : price;
    	}),
    
    
    //ÂêçÁÇ∫ VEG_REC ÁöÑÊäòÊâ£Ë¶èÂâáÔºåÂ∞çÊáâË≥áÊñôÂ∫´Ê¥ªÂãïË°®‰∏≠ÁöÑ ACT_CATE Ê¨Ñ‰ΩçÔºåÂ¶ÇÊûúÊòØ"Á¥†È£üÊé®Âª£"ÔºåÂ∞±‰ª£Ë°®Â±¨ÊñºÈÄôÁ®ÆÊ¥ªÂãïÈ°ûÂûã„ÄÇÂ¶ÇÊûúÂïÜÂìÅÊâÄÂ±¨ÁöÑÂ∫óÂÆ∂ÂàÜÈ°ûÂêçÁ®±ÔºàstorCatNameÔºâ‰∏≠Âê´Êúâ Á¥†È£üÔºåÂ∞±Áµ¶ÊäòÊâ£ÔºåÂê¶ÂâáÂéüÂÉπ„ÄÇ„Äç
    VEG_REC(List.of("Á¥†È£üÊé®Âª£"), (prod, act) -> {
        return StringUtil.containsNormalized(prod.getStore().getStorCatName(), "Á¥†È£ü")
            ? (int)(prod.getProdPrice() * act.getActDiscValue())
            : prod.getProdPrice();
    }),

    FASTFOOD_DISCOUNT(List.of("ÈÄüÈ£üÂÑ™ÊÉ†"), (prod, act) -> {
        return StringUtil.containsNormalized(prod.getStore().getStorCatName(), "ÈÄüÈ£ü")
            ? (int)(prod.getProdPrice() * act.getActDiscValue())
            : prod.getProdPrice();
}),

	   // È°ûÂûã 3: ÈÄöÁî®ÊäòÊâ£
    MEMBER_DAY(List.of("ÊúÉÂì°Êó•"), (prod, act) ->
        (int)(prod.getProdPrice() * act.getActDiscValue())
    ),

    LIMITED_OFFER(List.of("Â≠£ÁØÄÂÑ™ÊÉ†"), (prod, act) ->
        (int)(prod.getProdPrice() * act.getActDiscValue())
    ),

    // È°ûÂûã 4: Ë≥ºÁâ©ËªäÈÇèËºØÔºàÈ°ØÁ§∫ÂéüÂÉπÔºâ
    BUY_ONE_GET_ONE(List.of("ÈôêÊôÇÂÑ™ÊÉ†","Ë≤∑‰∏ÄÈÄÅ‰∏Ä","ÈñãÂπïÊÖ∂"), (prod, act) ->
        prod.getProdPrice()
    ),

    SECOND_HALF(List.of("Á¨¨‰∫å‰ª∂5Êäò"), (prod, act) ->
        (int)(prod.getProdPrice() * act.getActDiscValue())
    );

	// Ê¨Ñ‰Ωç
    private final List<String> aliases;
    private final BiFunction<ProductVO, ActVO, Integer> calculator;

    // Âª∫ÊßãÂ≠ê
    ActCategoryEnum(List<String> aliases, BiFunction<ProductVO, ActVO, Integer> calculator) {
        this.aliases = aliases;
        this.calculator = calculator;
    }

    // Ë®àÁÆóÈÇèËºØÂëºÂè´
    public int calculate(ProductVO prod, ActVO act) {
        return calculator.apply(prod, act);
    }

    // ËΩâÊèõÂ≠ó‰∏≤ÁÇ∫ enum
    public static ActCategoryEnum from(String input) {
        if (input == null) return null;

        //ÂæûË≥áÊñôÂ∫´ÊíàÂá∫‰æÜÁöÑ ACT_CATE ÊñáÂ≠óÔºàÂÉè„ÄåÈôêÊôÇÂÑ™ÊÉ†„Äç„ÄÅ„ÄåÁ¥†È£üÊé®Ëñ¶„Äç„ÄÅ„ÄåÈ£≤ÂìÅÊó•„ÄçÁ≠âÔºâÔºåËΩâÊèõÊàêÂ∞çÊáâÁöÑ enum Áâ©‰ª∂
        String normalizedInput = Normalizer.normalize(input, Normalizer.Form.NFKC).trim();

        for (ActCategoryEnum e : values()) {
            for (String alias : e.aliases) {
                String normalizedAlias = Normalizer.normalize(alias, Normalizer.Form.NFKC).trim();
                if (normalizedInput.equalsIgnoreCase(normalizedAlias)) {
                	//System.out.println("‚úÖ ÊàêÂäüÂ∞çÊáâÊ¥ªÂãïÈ°ûÂûãÔºö" + input + " ‚Üí " + e.name());
                    return e;
                }
            }
        }
        
        //System.out.println("‚ö† Ê≤íÊúâÂ∞çÊáâÁöÑÂïÜÂìÅÔºåÁÑ°Ê≥ïËß£ÊûêÊ¥ªÂãïÈ°ûÂûãÔºö" + input);
        return null;
    }

}
//		// È°ûÂûã 2: Â∫óÂÆ∂È°ûÂà•Á¨¶Âêà
//			     //ÊñπÊ≥ï1(storeVOÊ≤íÊúâÂÆöÁæ©storeCatName)
//		if (actCate.contains("È£≤Êñô")) {
//			return (prod, act) -> 
//			  Optional.ofNullable(prod.getStore())
//			  	.map(StoreVO::getStoreCate)
//			  	.map(StoreCateVO::getStorCatName)
//			  	.filter(name -> name.contains("È£≤Êñô"))
//			  	.isPresent()
//			  	?(int)(prod.getProdPrice() * act.getActDiscValue())
//			  	: prod.getProdPrice();
//			}
//		
//		         //ÊñπÊ≥ï2
//		prod.getStore().getStorCatName() ‚úÖÔºàStoreVOÈáçÊñ∞ÂÆöÁæ©‰∫ÜÔºâ
//	}
	
	
//	    ÂÑ™ÊÉ†Ê¥ªÂãï((prod, rule) -> prod.getProdPrice() - 5),
//	    Êñ∞ÂìÅ‰∏äÂ∏Ç((prod, rule) -> prod.getProdName().contains("ËçâËéì") ? (int)(prod.getProdPrice() * 0.9) : prod.getProdPrice()),
//	    ÈôêÊôÇÂÑ™ÊÉ†((prod, rule) -> prod.getProdPrice() / 2),
//	    ÊúÉÂì°Êó•((prod, rule) -> (int)(prod.getProdPrice() * 0.85)),
//	    È£≤ÂìÅÊó•((prod, rule) -> prod.getProductCategory().getProdCate().contains("È£≤Êñô") ? prod.getProdPrice() / 2 : prod.getProdPrice()),
//	    Á¥†È£üÊé®Ëñ¶((prod, rule) -> prod.getProductCategory().getProdCate().contains("Á¥†È£ü") ? (int)(prod.getProdPrice() * 0.8) : prod.getProdPrice()),
//	    ÈÄüÈ£üÂÑ™ÊÉ†((prod, rule) -> prod.getProductCategory().getProdCate().contains("ÈÄüÈ£ü") ? (int)(prod.getProdPrice() * 0.75) : prod.getProdPrice()),
//	    Áæ©ÂºèÁæéÈ£üÁØÄ((prod, rule) -> prod.getProdName().contains("Áæ©Â§ßÂà©È∫µ") ? (int)(prod.getProdPrice() * 0.9) : prod.getProdPrice()),
//	    ÁáíÁÉ§Êó•((prod, rule) -> prod.getProdName().contains("ÁÉ§") ? (int)(prod.getProdPrice() * 0.75) : prod.getProdPrice()),
//	    ÁÅ´ÈçãÂ≠£((prod, rule) -> prod.getProdName().contains("ÁÅ´Èçã") ? prod.getProdPrice() - 50 : prod.getProdPrice());


